use std
use sys

use "opts.use"

pkg =
	const master	: (dirs : byte[:][:] -> void)
;;

const master = {dirs
	var pid
	var err
	var stdin : std.fd[2]
	var stdout : std.fd[2]


	err = std.pipe(&stdin)
	if err != 0
		std.fatal(1, "Could not create pipes: err %l\n", -err)
	;;
	err = std.pipe(&stdout)
	if err != 0
		std.fatal(1, "Could not create pipes: err %l\n", -err)
	;;
	pid = runslave(stdin[1], stdout[0], dirs)
	sync(stdin[0], stdout[1])
	match std.wait(pid)
	| `std.Wsuccess:	/* nothing */
	| `std.Wfailure:	std.fatal(1, "failed to run pirateonion\n")
	| `std.Wsignalled:	std.fatal(1, "failed to run pirateonion: crashed\n")
	| `std.Waiterror:	std.fatal(1, "failed to wait for pirateonion\n")
	;;
}

const sync = {childin, childout
	var reqhash : byte[64]
	var rbuf : byte[2048]
	var n, len

	while true
		n = std.read(0, reqhash[:])
		if n == 64
			std.write(childin, reqhash[:])
		elif n <= 0
			break
		;;
		len = std.read(childout, rbuf[:])
		if len >= 0
			std.write(1, rbuf[:len])
		;;
	;;
}

const runslave = {stdin, stdout, dirs
	var pid
	var cmd

	/* build the command array */
	cmd = [][:]
	if opt_remote.len > 0
		cmd = std.slpush(cmd, "ssh")
		cmd = std.slpush(cmd, opt_remote)
	;;
	cmd = std.slpush(cmd, "./pirateonion")
	cmd = std.slpush(cmd, "-s")
	for d in dirs
		cmd = std.slpush(cmd, d)
	;;

	/* fork the worker */
	pid = std.fork()
	if pid == -1
		std.fatal(1, "Could not fork to start slave\n")
	elif pid == 0
		/* stdin/stdout for our communication. */
		if sys.dup2(stdin castto(sys.fd), 0) != 0
			std.fatal(1, "unable to set stdin\n")
		;;
		if sys.dup2(stdin castto(sys.fd), 1) != 1
			std.fatal(1, "unable to set stdout\n")
		;;
		std.close(stdin)
		std.close(stdout)
		if std.execvp(cmd[0], cmd) < 0
			std.fatal(1, "failed to exec %s\n")
		;;
	else
		-> pid
	;;

}

