use std
use bio

pkg =
	const Msgstart	: byte = 0
	const Msgend	: byte = 1
	const Msgann	: byte = 2
	const Msgreq	: byte = 3
	const Msgfhdr	: byte = 4

	type msg = union
		`Mstart
		`Mend
		`Mann	msgannounce
		`Mreq	msgrequest
		`Mfhdr	msgfilehdr
	;;

	type msgannounce = struct
		hash	: byte[32]
		path	: byte[:]
	;;

	type msgrequest = struct
		hash : byte[32]
	;;

	type msgfilehdr = struct
		mode	: uint32
		uid	: uint32
		gid	: uint32
		atimesec	: uint64
		atimensec	: uint64
		mtimesec	: uint64
		mtimensec	: uint64
		ctimesec	: uint64
		ctimensec	: uint64
		size	: uint64
	;;

	/*
	const msgsend	: (f : bio.file#, msg : msg# -> bool)
	const msgrecv	: (f : bio.file# -> msg#)
	const msgpretty	: (msg : msg# -> void)
	*/
;;

const msgsend = {f, msg
	match msg#
	| `Mstart:
		bio.putb(f, Msgstart)
	| `Mend:
		bio.putb(f, Msgend)
	| `Mann a:
		bio.putb(f, Msgann)
		bio.write(f, a.hash[:])
		bio.putle32(f, a.path.len)
		bio.write(f, a.path)
	| `Mreq r:
		bio.putb(f, Msgreq)
		bio.write(f, r.hash[:])
	| `Mfhdr fh:
		bio.putb(f, Msgfhdr)
		bio.putle32(f, fh.mode)
		bio.putle32(f, fh.uid)
		bio.putle32(f, fh.gid)
		bio.putle64(f, fh.atimesec)
		bio.putle64(f, fh.atimensec)
		bio.putle64(f, fh.mtimesec)
		bio.putle64(f, fh.mtimensec)
		bio.putle64(f, fh.ctimesec)
		bio.putle64(f, fh.ctimensec)
		bio.putle64(f, fh.size)
	;;
	bio.flush(f)
	-> true
}

const msgrecv = {f
	var t
	var hash : byte[32]
	var fh : msgfilehdr
	var npath
	var path

	t = bio.getb(f)
	match t
	| `bio.Ok Msgstart:
		-> std.mk(`Mstart)
	| `bio.Ok Msgend:
		-> std.mk(`Mend)
	| `bio.Ok Msgann:
		bio.read(f, hash[:])
		npath = tryread(bio.getle32(f))
		path = std.slalloc(npath)
		bio.read(f, path)
		-> std.mk(`Mann [.hash=hash, .path=path])
	| `bio.Ok Msgreq:
		bio.read(f, hash[:])
		-> std.mk(`Mreq	 [.hash=hash])
	| `bio.Ok Msgfhdr:
		fh.mode = tryread(bio.getle32(f))
		fh.uid = tryread(bio.getle32(f))
		fh.gid = tryread(bio.getle32(f))
		fh.atimesec = tryread(bio.getle64(f))
		fh.atimensec = tryread(bio.getle64(f))
		fh.mtimesec = tryread(bio.getle64(f))
		fh.mtimensec = tryread(bio.getle64(f))
		fh.ctimesec = tryread(bio.getle64(f))
		fh.ctimensec = tryread(bio.getle64(f))
		fh.size = tryread(bio.getle64(f))

		-> std.mk(`Mfhdr fh)
	| `bio.Ok _:
		std.fatal("Malformed message!\n")
	| `bio.Eof:
		std.fatal("Malformed message!\n")
	| `bio.Err e:
		std.fatal("Transport error: {}\n", e)
	;;
}

generic tryread = {val : bio.status(@a) -> @a
	match val
	| `bio.Ok v:	-> v
	| `bio.Eof:	std.fatal("premature eof\n")
	| `bio.Err e:	std.fatal("transport error: {}\n", e)
	;;
}
