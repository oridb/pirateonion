use std
use sys
use crypto
use fileutil

use "opts"

pkg =
	const slave : (dirs : byte[:][:] -> void)
;;

const slave = {dirs
	var filemap

	filemap = std.mkht(std.strhash, std.streq)
	for d : dirs
		filelist(filemap, d)
		syncsend(filemap)
	;;

	filemapfree(filemap)
}

const filelist = {filemap, d
	for f : fileutil.bywalk(d)
		filehash(filemap, f)
	;;
}


const syncsend = {filemap
	var fhash : byte[64]
	var n

	while true
		n = std.try(std.read(0, fhash[:]))
		if n == 64
			sendfile(filemap, fhash[:])
		elif n <= 0
			break
		;;
	;;
}

const sendfile = {filemap, fhash
	var buf : byte[1024*1024]
	var path
	var sz, n
	var fd
	var sb

	match std.htget(filemap, fhash)
	| `std.None:	std.put("Error locating {}\n", fhash)
	| `std.Some p:	path = p
	;;

	fd = std.try(std.open(path, std.Oread))
	if sys.fstat((fd : sys.fd), &sb) != 0
		std.put("Erred to stat {}\n", path)
		-> void
	;;
	sz = (sb.size : std.size)
	std.put("{}\n", sz)
	while true
		n = std.try(std.read(fd, buf[:]))
		if n == 0
			break
		elif n < 0
			break
		;;
		n = std.clamp(n, 0, sz)
		std.write(0, buf[:n])
		sz -= n
	;;
}

const filehash = {filemap, p
	var buf : byte[1024*1024]
	var hval
	var fd
	var n
	var h

	crypto.sha256init(&h)
	fd = std.try(std.open(p, std.Oread))

	while true
		n = std.try(std.read(fd, buf[:]))
		if n == 0
			break
		;;
		crypto.sha256add(&h, buf[:n])
	;;
	hval = crypto.sha256fin(&h)
	std.close(fd)
	std.put("hash: {r}\tpath: {}\n", hval[:], p)
	std.htput(filemap, std.fmt("{r}", hval[:]), std.sldup(p))
}

const filemapfree = {fm
	for (k, v) : std.byhtkeyvals(fm)
		std.slfree(k)
		std.slfree(v)
	;;
	std.htfree(fm)
}
